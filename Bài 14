#include "main.h"
#include "stm32f1xx_hal.h"
#include <stdio.h>
#include <string.h>

/* ---- C?u hình LCD ---- */
#define RS_Pin   GPIO_PIN_1
#define RS_Port  GPIOA
#define EN_Pin   GPIO_PIN_2
#define EN_Port  GPIOA
#define D4_Pin   GPIO_PIN_3
#define D4_Port  GPIOA
#define D5_Pin   GPIO_PIN_4
#define D5_Port  GPIOA
#define D6_Pin   GPIO_PIN_5
#define D6_Port  GPIOA
#define D7_Pin   GPIO_PIN_6
#define D7_Port  GPIOA

ADC_HandleTypeDef hadc1;

/* ---- Prototype ---- */
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);

void LCD_Init(void);
void LCD_SendCmd(char cmd);
void LCD_SendData(char data);
void LCD_SendString(char *str);
void LCD_Clear(void);
void LCD_SetCursor(int row, int col);
void LCD_Enable(void);

/* ---- Hàm chính ---- */
int main(void)
{
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_ADC1_Init();

  LCD_Init();
  LCD_Clear();

  char buffer[16];
  uint32_t adc_value;
  float voltage;

  while (1)
  {
    HAL_ADC_Start(&hadc1);
    if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
    {
      adc_value = HAL_ADC_GetValue(&hadc1);
      voltage = (adc_value * 3.3f) / 4095.0f;

      LCD_Clear();
      LCD_SetCursor(0,0);
      sprintf(buffer, "ADC: %4u", adc_value);
      LCD_SendString(buffer);

      LCD_SetCursor(1,0);
      sprintf(buffer, "V: %.2f V", voltage);
      LCD_SendString(buffer);
    }
    HAL_Delay(500);
  }
}

/* ---- LCD Functions ---- */
void LCD_Enable(void)
{
  HAL_GPIO_WritePin(EN_Port, EN_Pin, GPIO_PIN_SET);
  HAL_Delay(1);
  HAL_GPIO_WritePin(EN_Port, EN_Pin, GPIO_PIN_RESET);
  HAL_Delay(1);
}

void LCD_SendCmd(char cmd)
{
  HAL_GPIO_WritePin(RS_Port, RS_Pin, GPIO_PIN_RESET);

  HAL_GPIO_WritePin(D4_Port, D4_Pin, (cmd>>4)&0x01);
  HAL_GPIO_WritePin(D5_Port, D5_Pin, (cmd>>5)&0x01);
  HAL_GPIO_WritePin(D6_Port, D6_Pin, (cmd>>6)&0x01);
  HAL_GPIO_WritePin(D7_Port, D7_Pin, (cmd>>7)&0x01);
  LCD_Enable();

  HAL_GPIO_WritePin(D4_Port, D4_Pin, (cmd)&0x01);
  HAL_GPIO_WritePin(D5_Port, D5_Pin, (cmd>>1)&0x01);
  HAL_GPIO_WritePin(D6_Port, D6_Pin, (cmd>>2)&0x01);
  HAL_GPIO_WritePin(D7_Port, D7_Pin, (cmd>>3)&0x01);
  LCD_Enable();
}

void LCD_SendData(char data)
{
  HAL_GPIO_WritePin(RS_Port, RS_Pin, GPIO_PIN_SET);

  HAL_GPIO_WritePin(D4_Port, D4_Pin, (data>>4)&0x01);
  HAL_GPIO_WritePin(D5_Port, D5_Pin, (data>>5)&0x01);
  HAL_GPIO_WritePin(D6_Port, D6_Pin, (data>>6)&0x01);
  HAL_GPIO_WritePin(D7_Port, D7_Pin, (data>>7)&0x01);
  LCD_Enable();

  HAL_GPIO_WritePin(D4_Port, D4_Pin, (data)&0x01);
  HAL_GPIO_WritePin(D5_Port, D5_Pin, (data>>1)&0x01);
  HAL_GPIO_WritePin(D6_Port, D6_Pin, (data>>2)&0x01);
  HAL_GPIO_WritePin(D7_Port, D7_Pin, (data>>3)&0x01);
  LCD_Enable();
}

void LCD_SendString(char *str)
{
  while(*str) LCD_SendData(*str++);
}

void LCD_Clear(void)
{
  LCD_SendCmd(0x01);
  HAL_Delay(2);
}

void LCD_SetCursor(int row, int col)
{
  int addr = (row==0) ? 0x80+col : 0xC0+col;
  LCD_SendCmd(addr);
}

void LCD_Init(void)
{
  HAL_Delay(50);
  LCD_SendCmd(0x02);
  LCD_SendCmd(0x28);
  LCD_SendCmd(0x0C);
  LCD_SendCmd(0x06);
  LCD_Clear();
}

/* ---- Peripheral Init ---- */
static void MX_ADC1_Init(void)
{
  ADC_ChannelConfTypeDef sConfig = {0};

  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  HAL_ADC_Init(&hadc1);

  sConfig.Channel = ADC_CHANNEL_0;          // PA0
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
}

static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  __HAL_RCC_GPIOA_CLK_ENABLE();   // B?t clock Port A

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;

  GPIO_InitStruct.Pin = RS_Pin|EN_Pin|D4_Pin|D5_Pin|D6_Pin|D7_Pin;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}

/* ---- Clock Config ---- */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* ---- Error Handler ---- */
void Error_Handler(void)
{
  while(1)
  {
    // Có th? ch?p LED báo l?i ? dây
  }
}
